import { GeminiConfig } from '../constants/GeminiConfig';

interface GeminiResponse {
  candidates?: {
    content: {
      parts: {
        text: string;
      }[];
    };
  }[];
  error?: {
    code: number;
    message: string;
  };
}

export async function fetchMedicationInfo(medicationName: string): Promise<string> {
  if (!medicationName.trim()) {
    throw new Error('Nome do medicamento n√£o pode estar vazio');
  }

  try {
    const prompt = `Forne√ßa informa√ß√µes sobre o medicamento "${medicationName}" de forma SUPER AMIG√ÅVEL e SIMPLES, como se estivesse explicando para um amigo:

üíä ${medicationName}

üìã O que √©: [explica√ß√£o simples do que √© o medicamento]

üéØ Para que serve: [para que problemas ele ajuda, de forma bem simples]

‚ö†Ô∏è Cuidados importantes: [o que voc√™ precisa ficar de olho, de forma clara]

üí° Como usar: [dicas pr√°ticas de como tomar, de forma bem simples]

IMPORTANTE:
‚úÖ Use linguagem do dia a dia, sem termos m√©dicos complicados
‚úÖ Seja carinhoso e acolhedor
‚úÖ D√™ dicas pr√°ticas e f√°ceis de entender
‚úÖ Use emojis para deixar mais alegre
‚ùå N√ÉO use formata√ß√£o markdown (sem **, *, #, etc.)
‚ùå N√ÉO use listas com marcadores especiais

Exemplo de tom: "Esse rem√©dio √© tipo um 'ajudante' que vai te fazer sentir melhor! üòä"

Responda de forma calorosa e acess√≠vel! üåü`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ]
    };
    
    const response = await fetch(`${GeminiConfig.BASE_URL}?key=${GeminiConfig.API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[Gemini] Erro na resposta:', errorText);
      throw new Error(`Erro na requisi√ß√£o: ${response.status} ${response.statusText}`);
    }

    const data: GeminiResponse = await response.json();

    if (data.error) {
      console.error('[Gemini] Erro retornado pela API:', data.error);
      throw new Error(data.error.message || 'Erro ao buscar informa√ß√µes do medicamento');
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma informa√ß√£o encontrada para este medicamento');
    }

    const text = data.candidates[0].content.parts[0].text;

    return text.trim();

  } catch (error) {
    console.error('[Gemini] Erro ao buscar informa√ß√µes do medicamento:', error);
    console.error('[Gemini] Stack trace:', error instanceof Error ? error.stack : 'N/A');
    
    // Fallback para caso a API n√£o esteja dispon√≠vel
    const fallbackResponse = `üíä ${medicationName}\n\nüìã Informa√ß√µes n√£o dispon√≠veis no momento. Consulte seu m√©dico ou farmac√™utico para orienta√ß√µes sobre este medicamento.`;
    return fallbackResponse;
  }
}

export async function analyzeDocument(text: string): Promise<string> {
  if (!text.trim()) {
    throw new Error('Texto n√£o pode estar vazio');
  }

  try {
    const prompt = `Analise o seguinte texto de um documento m√©dico e forne√ßa um resumo estruturado com as informa√ß√µes mais importantes:

${text}

Forne√ßa um resumo organizado com:
- Principais informa√ß√µes m√©dicas
- Medicamentos mencionados
- Dosagens e frequ√™ncias
- Avisos importantes
- Recomenda√ß√µes

Formate a resposta de forma clara e objetiva.`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ]
    };

    const response = await fetch(`${GeminiConfig.BASE_URL}?key=${GeminiConfig.API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }

    const data: GeminiResponse = await response.json();

    if (data.error) {
      throw new Error(data.error.message || 'Erro ao analisar documento');
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma an√°lise gerada');
    }

    return data.candidates[0].content.parts[0].text.trim();

  } catch (error) {
    console.error('[Gemini] Erro ao analisar documento:', error);
    throw new Error('Erro ao analisar o documento. Tente novamente.');
  }
}

export async function generateMedicalDossier(memberData: {
  name: string;
  age: number;
  bloodType?: string;
  weight?: string;
  height?: string;
  relation: string;
  treatments: Array<{
    medication: string;
    dosage?: string;
    frequency_value: number;
    frequency_unit: string;
    duration: string;
    status: string;
    notes?: string;
  }>;
  notes?: string;
}): Promise<string> {
  try {
    const activeTreatments = memberData.treatments.filter(t => t.status === 'ativo');
    const completedTreatments = memberData.treatments.filter(t => t.status === 'finalizado');
    
    const prompt = `Como um m√©dico especialista experiente, analise o perfil m√©dico completo do paciente e forne√ßa um dossi√™ m√©dico detalhado e profissional:

üë§ PERFIL DO PACIENTE:
‚Ä¢ Nome: ${memberData.name}
‚Ä¢ Idade: ${memberData.age} anos
‚Ä¢ Rela√ß√£o: ${memberData.relation}
‚Ä¢ Tipo Sangu√≠neo: ${memberData.bloodType || 'N√£o informado'}
‚Ä¢ Peso: ${memberData.weight || 'N√£o informado'}
‚Ä¢ Altura: ${memberData.height || 'N√£o informado'}
${memberData.notes ? `‚Ä¢ Observa√ß√µes: ${memberData.notes}` : ''}

üíä TRATAMENTOS ATIVOS (${activeTreatments.length}):
${activeTreatments.map(t => 
  `‚Ä¢ ${t.medication}${t.dosage ? ` - ${t.dosage}` : ''} - ${t.frequency_value} ${t.frequency_unit} por ${t.duration}${t.notes ? ` (${t.notes})` : ''}`
).join('\n') || 'Nenhum tratamento ativo'}

üìã HIST√ìRICO DE TRATAMENTOS (${completedTreatments.length}):
${completedTreatments.map(t => 
  `‚Ä¢ ${t.medication}${t.dosage ? ` - ${t.dosage}` : ''} - Finalizado`
).join('\n') || 'Nenhum tratamento finalizado'}

Por favor, forne√ßa uma an√°lise m√©dica completa e profissional seguindo esta estrutura:

üîç AN√ÅLISE CL√çNICA GERAL
[Avalia√ß√£o geral do estado de sa√∫de baseado nos dados dispon√≠veis]

üíä AN√ÅLISE FARMACOL√ìGICA
[An√°lise dos medicamentos em uso, poss√≠veis intera√ß√µes, adequa√ß√£o das dosagens]

‚ö†Ô∏è ALERTAS E PRECAU√á√ïES
[Identifica√ß√£o de poss√≠veis riscos, contraindica√ß√µes ou cuidados especiais]

üìä INDICADORES DE SA√öDE
[An√°lise de peso, altura, IMC se poss√≠vel, e outros indicadores relevantes]

üéØ RECOMENDA√á√ïES M√âDICAS
[Sugest√µes espec√≠ficas para otimizar o tratamento e a sa√∫de geral]

üìÖ MONITORAMENTO SUGERIDO
[Frequ√™ncia de consultas, exames recomendados, acompanhamentos necess√°rios]

IMPORTANTE:
‚úÖ Use linguagem m√©dica profissional mas acess√≠vel
‚úÖ Seja espec√≠fico e detalhado nas an√°lises
‚úÖ Considere a idade e caracter√≠sticas do paciente
‚úÖ Identifique padr√µes nos medicamentos
‚úÖ Forne√ßa insights valiosos baseados na experi√™ncia m√©dica
‚úÖ Use emojis m√©dicos para organizar as se√ß√µes
‚ùå N√ÉO use formata√ß√£o markdown (sem **, *, #, etc.)
‚ùå N√ÉO substitua diagn√≥stico m√©dico real
‚ùå SEMPRE recomende consulta m√©dica para decis√µes importantes

Forne√ßa uma an√°lise completa, profissional e informativa que agregue real valor ao acompanhamento m√©dico do paciente.`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ]
    };

    const response = await fetch(`${GeminiConfig.BASE_URL}?key=${GeminiConfig.API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }

    const data: GeminiResponse = await response.json();

    if (data.error) {
      throw new Error(data.error.message || 'Erro ao gerar dossi√™ m√©dico');
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma an√°lise m√©dica gerada');
    }

    return data.candidates[0].content.parts[0].text.trim();

  } catch (error) {
    console.error('[Gemini] Erro ao gerar dossi√™ m√©dico:', error);
    throw new Error('Erro ao gerar an√°lise m√©dica. Tente novamente.');
  }
}

export interface MedicationCompleteInfo {
  categoria: string;
  unidade: string;
  descricao: string;
  indicacoes: string;
  contraindicacoes: string;
  posologia: string;
  cuidados: string;
}

export async function getMedicationCompleteInfo(medicationName: string): Promise<MedicationCompleteInfo> {
  if (!medicationName.trim()) {
    throw new Error('Nome do medicamento n√£o pode estar vazio');
  }

  try {
    const prompt = `Voc√™ √© um farmac√™utico especialista! Analise o medicamento "${medicationName}" e forne√ßa as informa√ß√µes EXATAS no formato JSON abaixo:

{
  "categoria": "[Uma das categorias: Analg√©sico, Antibi√≥tico, Anti-inflamat√≥rio, Antial√©rgico, Vitamina, Suplemento, Cardiovascular, Digestivo, Respirat√≥rio, Dermatol√≥gico, Oft√°lmico, Outros]",
  "unidade": "[Uma das unidades: comprimidos, c√°psulas, ml, mg, g, gotas, sach√™s, ampolas, frascos, unidades]",
  "descricao": "[Descri√ß√£o simples do que √© o medicamento em 1-2 frases]",
  "indicacoes": "[Para que serve, de forma simples e clara]",
  "contraindicacoes": "[Principais contraindica√ß√µes de forma clara]",
  "posologia": "[Como tomar de forma simplificada]",
  "cuidados": "[Cuidados importantes de forma simples]"
}

IMPORTANTE:
‚úÖ Responda APENAS o JSON v√°lido, sem texto adicional
‚úÖ Use linguagem simples e acess√≠vel
‚úÖ Seja preciso na categoria e unidade
‚úÖ N√ÉO use formata√ß√£o markdown
‚úÖ Mantenha as informa√ß√µes concisas mas completas

Se n√£o conhecer o medicamento, use categoria "Outros" e unidade "unidades" com informa√ß√µes gen√©ricas.`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ]
    };

    const response = await fetch(`${GeminiConfig.BASE_URL}?key=${GeminiConfig.API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }

    const data: GeminiResponse = await response.json();

    if (data.error) {
      throw new Error(data.error.message || 'Erro ao buscar informa√ß√µes do medicamento');
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma informa√ß√£o encontrada');
    }

    let responseText = data.candidates[0].content.parts[0].text.trim();
    
    // Limpar poss√≠veis caracteres de formata√ß√£o markdown
    responseText = responseText.replace(/```json\s*/g, '').replace(/```\s*/g, '');
    responseText = responseText.replace(/^[\s\S]*?({[\s\S]*})[\s\S]*$/, '$1');
    
    console.log('[Gemini] Resposta limpa:', responseText);
    
    // Tentar fazer parse do JSON
    try {
      const medicationInfo = JSON.parse(responseText);
      
      // Validar se tem todas as propriedades necess√°rias
      if (!medicationInfo.categoria || !medicationInfo.unidade || !medicationInfo.descricao) {
        throw new Error('Resposta incompleta da IA');
      }
      
      return medicationInfo;
    } catch (parseError) {
      console.error('[Gemini] Erro ao fazer parse do JSON:', parseError);
      console.error('[Gemini] Resposta original recebida:', data.candidates[0].content.parts[0].text);
      console.error('[Gemini] Resposta limpa:', responseText);
      
      // Fallback com informa√ß√µes padr√£o
      return {
        categoria: 'Outros',
        unidade: 'unidades',
        descricao: `Medicamento ${medicationName}`,
        indicacoes: 'Consulte seu m√©dico para informa√ß√µes sobre indica√ß√µes.',
        contraindicacoes: 'Consulte seu m√©dico para informa√ß√µes sobre contraindica√ß√µes.',
        posologia: 'Siga as orienta√ß√µes do seu m√©dico.',
        cuidados: 'Mantenha em local seco e arejado, longe do alcance de crian√ßas.'
      };
    }

  } catch (error) {
    console.error('[Gemini] Erro ao buscar informa√ß√µes completas do medicamento:', error);
    
    // Fallback para caso a API n√£o esteja dispon√≠vel
    return {
      categoria: 'Outros',
      unidade: 'unidades',
      descricao: `Medicamento ${medicationName}`,
      indicacoes: 'Consulte seu m√©dico para informa√ß√µes sobre indica√ß√µes.',
      contraindicacoes: 'Consulte seu m√©dico para informa√ß√µes sobre contraindica√ß√µes.',
      posologia: 'Siga as orienta√ß√µes do seu m√©dico.',
      cuidados: 'Mantenha em local seco e arejado, longe do alcance de crian√ßas.'
    };
  }
}

export async function extractActiveIngredient(medicationName: string): Promise<string> {
  if (!medicationName.trim()) {
    throw new Error('Nome do medicamento n√£o pode estar vazio');
  }

  try {
    const prompt = `Voc√™ √© um farmac√™utico especialista! Analise o medicamento "${medicationName}" e extraia APENAS o princ√≠pio ativo (subst√¢ncia ativa) principal.

IMPORTANTE:
‚úÖ Responda APENAS com o nome do princ√≠pio ativo, sem texto adicional
‚úÖ Use o nome cient√≠fico/gen√©rico da subst√¢ncia ativa
‚úÖ Se houver m√∫ltiplos princ√≠pios ativos, liste o principal
‚úÖ N√ÉO inclua dosagem, marca comercial ou outras informa√ß√µes
‚úÖ Se n√£o souber, responda apenas com a primeira palavra do medicamento

Exemplos:
- "Dipirona 500mg" ‚Üí "Dipirona"
- "Tylenol 750mg" ‚Üí "Paracetamol"
- "Aspirina" ‚Üí "√Åcido Acetilsalic√≠lico"
- "Alenia 400" ‚Üí "Budesonida + Formoterol"

Medicamento: ${medicationName}
Princ√≠pio ativo:`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ]
    };

    const response = await fetch(`${GeminiConfig.BASE_URL}?key=${GeminiConfig.API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }

    const data: GeminiResponse = await response.json();

    if (data.error) {
      throw new Error(data.error.message || 'Erro ao extrair princ√≠pio ativo');
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma informa√ß√£o encontrada');
    }

    let activeIngredient = data.candidates[0].content.parts[0].text.trim();
    
    // Limpar poss√≠veis formata√ß√µes
    activeIngredient = activeIngredient.replace(/[*#`-]/g, '').trim();
    
    // Se a resposta for muito longa, pegar apenas a primeira linha
    activeIngredient = activeIngredient.split('\n')[0].trim();
    
    return activeIngredient || medicationName.split(' ')[0];

  } catch (error) {
    console.error('[Gemini] Erro ao extrair princ√≠pio ativo:', error);
    
    // Fallback: usar a primeira palavra do nome
    return medicationName.split(' ')[0] || '';
  }
}

export async function askGeminiChat(userMessage: string): Promise<string> {
  if (!userMessage.trim()) {
    throw new Error('Mensagem n√£o pode estar vazia');
  }

  try {
    const prompt = `Voc√™ √© um assistente m√©dico virtual amig√°vel e profissional! üè•

Responda √† seguinte pergunta de forma clara e amig√°vel, como se estivesse conversando com um amigo:

${userMessage}

IMPORTANTE:
‚úÖ Use emojis com modera√ß√£o (1-2 por resposta) para deixar a conversa mais amig√°vel
‚úÖ Fale de forma simples, sem termos m√©dicos complicados
‚úÖ Use linguagem do dia a dia, como se estivesse explicando para algu√©m que n√£o entende nada de medicina
‚úÖ Seja carinhoso e acolhedor
‚úÖ D√™ dicas pr√°ticas e f√°ceis de seguir
‚úÖ Sempre lembre que voc√™ √© um assistente e n√£o substitui o m√©dico
‚ùå N√ÉO use formata√ß√£o markdown (sem **, *, #, -, etc.)
‚ùå N√ÉO use listas com marcadores especiais
‚ùå N√ÉO use t√≠tulos com #

Exemplo de tom: "Oi! Vou te ajudar com isso de forma bem simples, t√°? üòä"

Responda de forma calorosa e acess√≠vel, usando texto simples e emojis com modera√ß√£o!`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ]
    };

    const response = await fetch(`${GeminiConfig.BASE_URL}?key=${GeminiConfig.API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }

    const data: GeminiResponse = await response.json();

    if (data.error) {
      throw new Error(data.error.message || 'Erro no chat');
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma resposta gerada');
    }

    return data.candidates[0].content.parts[0].text.trim();

  } catch (error) {
    console.error('[Gemini] Erro no chat:', error);
    throw new Error('Erro ao processar sua pergunta. Tente novamente.');
  }
}