/**
 * TESTE DE PERFORMANCE - IMAGENS GRANDES
 * 
 * Este script testa o upload e cache de imagens grandes para verificar:
 * - Tempo de upload
 * - Compress√£o autom√°tica
 * - Cache local
 * - Fallbacks em caso de erro
 */

import { uploadImage } from './services/firebase';
import { imageCache } from './utils/imageCache';
import * as FileSystem from 'expo-file-system';

// Simular diferentes tamanhos de imagem
const testImages = [
  {
    name: 'Pequena (50KB)',
    size: 50 * 1024,
    uri: 'https://picsum.photos/200/200'
  },
  {
    name: 'M√©dia (200KB)', 
    size: 200 * 1024,
    uri: 'https://picsum.photos/400/400'
  },
  {
    name: 'Grande (1MB)',
    size: 1024 * 1024,
    uri: 'https://picsum.photos/800/800'
  },
  {
    name: 'Muito Grande (3MB)',
    size: 3 * 1024 * 1024,
    uri: 'https://picsum.photos/1200/1200'
  }
];

async function testImagePerformance() {
  console.log('üöÄ INICIANDO TESTE DE PERFORMANCE DE IMAGENS');
  console.log('=' .repeat(50));

  for (const testImage of testImages) {
    console.log(`\nüì∏ Testando: ${testImage.name}`);
    console.log(`üîó URI: ${testImage.uri}`);
    
    try {
      // 1. Teste de Upload
      console.log('‚è±Ô∏è Testando upload...');
      const uploadStart = Date.now();
      
      const uploadedUrl = await uploadImage(testImage.uri, 'members', `test_${Date.now()}.jpg`);
      
      const uploadTime = Date.now() - uploadStart;
      console.log(`‚úÖ Upload conclu√≠do em: ${uploadTime}ms`);
      console.log(`üîó URL: ${uploadedUrl.substring(0, 50)}...`);
      
      // 2. Teste de Cache
      console.log('üíæ Testando cache...');
      const cacheStart = Date.now();
      
      const cachedUri = await imageCache.getCachedImage(uploadedUrl);
      
      const cacheTime = Date.now() - cacheStart;
      console.log(`‚úÖ Cache conclu√≠do em: ${cacheTime}ms`);
      
      // 3. Verificar tamanho do arquivo em cache
      if (cachedUri.startsWith('file://')) {
        const fileInfo = await FileSystem.getInfoAsync(cachedUri);
        if (fileInfo.exists) {
          console.log(`üìä Tamanho em cache: ${(fileInfo.size / 1024).toFixed(1)}KB`);
        }
      }
      
      // 4. Teste de segundo acesso (deve ser instant√¢neo)
      console.log('üîÑ Testando segundo acesso...');
      const secondAccessStart = Date.now();
      
      const secondCachedUri = await imageCache.getCachedImage(uploadedUrl);
      
      const secondAccessTime = Date.now() - secondAccessStart;
      console.log(`‚úÖ Segundo acesso em: ${secondAccessTime}ms (deve ser < 10ms)`);
      
      // Resumo
      console.log(`üìã RESUMO - ${testImage.name}:`);
      console.log(`   Upload: ${uploadTime}ms`);
      console.log(`   Cache: ${cacheTime}ms`);
      console.log(`   Segundo acesso: ${secondAccessTime}ms`);
      
      // Alertas de performance
      if (uploadTime > 30000) {
        console.log(`‚ö†Ô∏è ALERTA: Upload muito lento (${uploadTime}ms)`);
      }
      
      if (secondAccessTime > 100) {
        console.log(`‚ö†Ô∏è ALERTA: Cache n√£o est√° funcionando corretamente`);
      }
      
    } catch (error) {
      console.log(`‚ùå ERRO: ${error.message}`);
      
      // Testar fallbacks
      console.log('üîÑ Testando fallbacks...');
      try {
        // Tentar cache direto da URI original
        const fallbackCached = await imageCache.getCachedImage(testImage.uri);
        console.log(`‚úÖ Fallback funcionou: ${fallbackCached}`);
      } catch (fallbackError) {
        console.log(`‚ùå Fallback tamb√©m falhou: ${fallbackError.message}`);
      }
    }
    
    console.log('-'.repeat(30));
  }
  
  // Teste de limpeza de cache
  console.log('\nüßπ Testando limpeza de cache...');
  try {
    await imageCache.clearCache();
    console.log('‚úÖ Cache limpo com sucesso');
  } catch (error) {
    console.log(`‚ùå Erro ao limpar cache: ${error.message}`);
  }
  
  console.log('\nüèÅ TESTE DE PERFORMANCE CONCLU√çDO');
}

// Fun√ß√£o para testar apenas o cache (sem upload)
async function testCacheOnly() {
  console.log('üíæ TESTE ESPEC√çFICO DE CACHE');
  console.log('=' .repeat(30));
  
  const testUrls = [
    'https://picsum.photos/200/200?random=1',
    'https://picsum.photos/400/400?random=2', 
    'https://picsum.photos/600/600?random=3'
  ];
  
  for (const url of testUrls) {
    console.log(`\nüîó Testando: ${url}`);
    
    try {
      // Primeiro acesso
      const start1 = Date.now();
      const cached1 = await imageCache.getCachedImage(url);
      const time1 = Date.now() - start1;
      
      console.log(`üì• Primeiro acesso: ${time1}ms`);
      console.log(`üìÅ Cached URI: ${cached1.substring(0, 50)}...`);
      
      // Segundo acesso (deve ser do cache)
      const start2 = Date.now();
      const cached2 = await imageCache.getCachedImage(url);
      const time2 = Date.now() - start2;
      
      console.log(`‚ö° Segundo acesso: ${time2}ms`);
      
      if (time2 < 50) {
        console.log(`‚úÖ Cache funcionando corretamente`);
      } else {
        console.log(`‚ö†Ô∏è Cache pode n√£o estar funcionando`);
      }
      
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }
  }
}

// Exportar fun√ß√µes para uso
export { testImagePerformance, testCacheOnly };

// Se executado diretamente
if (require.main === module) {
  console.log('Escolha o teste:');
  console.log('1. Performance completa (upload + cache)');
  console.log('2. Apenas cache');
  
  // Para executar: node test_large_image_performance.js
  // Ou importar as fun√ß√µes em outro arquivo
}