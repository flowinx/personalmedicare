/**
 * TESTE R√ÅPIDO - VERIFICA√á√ÉO DE SINTAXE
 * 
 * Este script verifica se as corre√ß√µes de sintaxe foram aplicadas corretamente
 * e se as fun√ß√µes de persist√™ncia de medicamentos est√£o funcionando.
 */

// Teste de importa√ß√£o das fun√ß√µes
async function testImports() {
  console.log('üîç TESTE DE IMPORTA√á√ÉO DAS FUN√á√ïES');
  console.log('=' .repeat(40));
  
  try {
    // Tentar importar as fun√ß√µes principais
    const { 
      markMedicationAsTaken,
      getMedicationLogsByDate,
      getMedicationLogsByTreatment,
      addMedicationLog,
      updateWeightRecord,
      deleteWeightRecord
    } = await import('./services/firebase');
    
    console.log('‚úÖ markMedicationAsTaken importada');
    console.log('‚úÖ getMedicationLogsByDate importada');
    console.log('‚úÖ getMedicationLogsByTreatment importada');
    console.log('‚úÖ addMedicationLog importada');
    console.log('‚úÖ updateWeightRecord importada');
    console.log('‚úÖ deleteWeightRecord importada');
    
    // Verificar se s√£o fun√ß√µes
    console.log('\nüîß VERIFICA√á√ÉO DE TIPOS:');
    console.log(`markMedicationAsTaken √© fun√ß√£o: ${typeof markMedicationAsTaken === 'function'}`);
    console.log(`getMedicationLogsByDate √© fun√ß√£o: ${typeof getMedicationLogsByDate === 'function'}`);
    console.log(`getMedicationLogsByTreatment √© fun√ß√£o: ${typeof getMedicationLogsByTreatment === 'function'}`);
    console.log(`addMedicationLog √© fun√ß√£o: ${typeof addMedicationLog === 'function'}`);
    console.log(`updateWeightRecord √© fun√ß√£o: ${typeof updateWeightRecord === 'function'}`);
    console.log(`deleteWeightRecord √© fun√ß√£o: ${typeof deleteWeightRecord === 'function'}`);
    
    console.log('\n‚úÖ TODAS AS FUN√á√ïES IMPORTADAS COM SUCESSO!');
    return true;
    
  } catch (error) {
    console.error('‚ùå ERRO NA IMPORTA√á√ÉO:', error.message);
    console.error('Stack:', error.stack);
    return false;
  }
}

// Teste de sintaxe do HomeScreen
async function testHomeScreenImport() {
  console.log('\nüì± TESTE DE IMPORTA√á√ÉO DO HOMESCREEN');
  console.log('=' .repeat(40));
  
  try {
    // Tentar importar o HomeScreen
    const HomeScreen = await import('./screens/HomeScreen');
    
    console.log('‚úÖ HomeScreen importado com sucesso');
    console.log(`Tipo: ${typeof HomeScreen.default}`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå ERRO NA IMPORTA√á√ÉO DO HOMESCREEN:', error.message);
    return false;
  }
}

// Teste de verifica√ß√£o de duplicatas
async function testNoDuplicates() {
  console.log('\nüîç TESTE DE VERIFICA√á√ÉO DE DUPLICATAS');
  console.log('=' .repeat(40));
  
  try {
    const firebase = await import('./services/firebase');
    
    // Verificar se n√£o h√° fun√ß√µes duplicadas
    const functionNames = Object.keys(firebase);
    const duplicates = functionNames.filter((name, index) => 
      functionNames.indexOf(name) !== index
    );
    
    if (duplicates.length === 0) {
      console.log('‚úÖ Nenhuma fun√ß√£o duplicada encontrada');
      console.log(`Total de exports: ${functionNames.length}`);
    } else {
      console.log('‚ùå Fun√ß√µes duplicadas encontradas:', duplicates);
      return false;
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå ERRO NA VERIFICA√á√ÉO:', error.message);
    return false;
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üß™ TESTE COMPLETO DE CORRE√á√ÉO DE SINTAXE');
  console.log('=' .repeat(50));
  console.log(`üìÖ Data: ${new Date().toLocaleString()}`);
  
  const results = [];
  
  // Teste 1: Importa√ß√µes
  results.push(await testImports());
  
  // Teste 2: HomeScreen
  results.push(await testHomeScreenImport());
  
  // Teste 3: Duplicatas
  results.push(await testNoDuplicates());
  
  // Resumo
  console.log('\nüìä RESUMO DOS TESTES:');
  console.log('=' .repeat(30));
  
  const passed = results.filter(r => r).length;
  const total = results.length;
  
  console.log(`‚úÖ Testes aprovados: ${passed}/${total}`);
  
  if (passed === total) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Sintaxe corrigida com sucesso');
    console.log('‚úÖ Fun√ß√µes dispon√≠veis e funcionais');
    console.log('‚úÖ Sem duplicatas ou conflitos');
    console.log('\nüöÄ O sistema est√° pronto para uso!');
  } else {
    console.log('\n‚ùå ALGUNS TESTES FALHARAM');
    console.log('‚ö†Ô∏è Verifique os erros acima');
  }
  
  return passed === total;
}

// Exportar fun√ß√µes
export { testImports, testHomeScreenImport, testNoDuplicates, runAllTests };

// Executar se chamado diretamente
if (require.main === module) {
  runAllTests().catch(console.error);
}